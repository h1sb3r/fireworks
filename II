<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Feu d'artifice - Durée longue, éclat doux</title>
    <style>
        body { margin: 0; overflow: hidden; background: #000; }
        canvas { display: block; }
        #info {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-family: sans-serif;
            font-size: 14px;
            background: rgba(0,0,0,0.5);
            padding: 5px 10px;
            border-radius: 3px;
        }
    </style>
</head>
<body>
    <div id="info">Feu d'artifice (explosion douce, longue traînée)</div>
    <canvas id="fireworks-canvas"></canvas>
    <script type="importmap">
    {
      "imports": {
        "three": "https://cdn.jsdelivr.net/npm/three@0.162.0/build/three.module.js",
        "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.162.0/examples/jsm/"
      }
    }
    </script>
    <script type="module">
        import * as THREE from 'three';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
        import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
        import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';
        import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';

        // ---- PARAMÈTRES ----
        const ROCKET_LIFETIME = 2.2;
        const EXPLOSION_LIFETIME = 5.5;    // Particules restent longues
        const GRAVITY = -10.0;
        const BASE_PARTICLE_SIZE = 2.8;
        const BLOOM_STRENGTH = 1.8;        // Moins flash
        const BLOOM_RADIUS = 1.3;
        const BLOOM_THRESHOLD = 0.18;
        const LAUNCH_INTERVAL_MIN = 3.2;   // Tirs espacés
        const LAUNCH_INTERVAL_MAX = 4.5;
        const EXPLOSION_PARTICLES = 200;

        // ---- SCÈNE ----
        let scene, camera, renderer, composer, controls, clock;
        let currentState = "ready";
        let rocketObj = null;
        let explosionObjs = [];
        let timeSinceLastLaunch = 0;
        let nextLaunchInterval = 3.6;

        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 2000);
            camera.position.set(0, 50, 200);

            const canvas = document.getElementById('fireworks-canvas');
            renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setClearColor(0x000005);
            renderer.outputColorSpace = THREE.SRGBColorSpace;

            controls = new OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.target.set(0, 60, 0);

            composer = new EffectComposer(renderer);
            composer.addPass(new RenderPass(scene, camera));
            const bloomPass = new UnrealBloomPass(
                new THREE.Vector2(window.innerWidth, window.innerHeight),
                BLOOM_STRENGTH, BLOOM_RADIUS, BLOOM_THRESHOLD
            );
            composer.addPass(bloomPass);
            composer.addPass(new OutputPass());

            window.addEventListener('resize', onWindowResize);
            clock = new THREE.Clock();
            animate();
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            composer.setSize(window.innerWidth, window.innerHeight);
        }

        // ---- FUSÉE ----
        function launchRocket() {
            const startX = (Math.random() - 0.5) * 120;
            const startZ = (Math.random() - 0.5) * 60;
            const rocketColor = new THREE.Color().setHSL(Math.random(), 1, 0.5);

            const explosionHeight = 75 + Math.random() * 70;
            const velocityY = explosionHeight / ROCKET_LIFETIME;

            const geometry = new THREE.BufferGeometry();
            geometry.setAttribute('position', new THREE.Float32BufferAttribute([startX, 0, startZ], 3));
            const material = new THREE.PointsMaterial({
                size: BASE_PARTICLE_SIZE * 4,
                color: 0xFFFFC0,
                transparent: true,
                opacity: 0.98,
                blending: THREE.AdditiveBlending
            });
            const points = new THREE.Points(geometry, material);

            const trailMaterial = new THREE.PointsMaterial({
                size: BASE_PARTICLE_SIZE,
                color: rocketColor,
                transparent: true,
                opacity: 0.6,
                blending: THREE.AdditiveBlending
            });
            const trailGeometry = new THREE.BufferGeometry();
            const trailPositions = new Float32Array(60 * 3);
            trailGeometry.setAttribute('position', new THREE.BufferAttribute(trailPositions, 3));
            const trail = new THREE.Points(trailGeometry, trailMaterial);

            scene.add(points);
            scene.add(trail);

            rocketObj = {
                mesh: points,
                trail: trail,
                trailPositions: trailPositions,
                color: rocketColor,
                x: startX, y: 0, z: startZ,
                velocityY: velocityY,
                lifetime: ROCKET_LIFETIME,
                age: 0,
                trailIndex: 0,
                explosionHeight: explosionHeight
            };
            currentState = "rocket";
        }

        // ---- EXPLOSION (lueur douce, particules longues) ----
        function triggerExplosion(x, y, z, color) {
            const geometry = new THREE.BufferGeometry();
            const positions = [];
            const velocities = [];
            const colors = [];
            for (let i = 0; i < EXPLOSION_PARTICLES; i++) {
                const theta = Math.random() * Math.PI * 2;
                const phi = Math.acos(2 * Math.random() - 1.0);
                const r = 1.0 + Math.random() * 1.2;
                const vx = Math.sin(phi) * Math.cos(theta) * r * (17 + Math.random() * 15);
                const vy = Math.sin(phi) * Math.sin(theta) * r * (16 + Math.random() * 13);
                const vz = Math.cos(phi) * r * (14 + Math.random() * 10);

                positions.push(x, y, z);
                velocities.push(vx, vy, vz);

                // Lueur douce, mais moins boostée (explosion moins flash)
                const c = color.clone().lerp(new THREE.Color(1.18, 1.02, 0.93), 0.7 + Math.random() * 0.1);
                colors.push(c.r, c.g, c.b);
            }
            geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));
            geometry.setAttribute('velocity', new THREE.Float32BufferAttribute(velocities, 3));
            geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
            geometry.setAttribute('startTime', new THREE.Float32BufferAttribute(new Float32Array(EXPLOSION_PARTICLES).fill(clock.getElapsedTime()), 1));

            // Opacité très haute, fade out plus long et doux
            const material = new THREE.PointsMaterial({
                size: BASE_PARTICLE_SIZE * 1.6,
                vertexColors: true,
                transparent: true,
                opacity: 1,
                blending: THREE.AdditiveBlending
            });

            const points = new THREE.Points(geometry, material);
            scene.add(points);

            explosionObjs.push({
                mesh: points,
                geometry: geometry,
                startTime: clock.getElapsedTime(),
                age: 0,
                lifetime: EXPLOSION_LIFETIME
            });
        }

        // ---- ANIMATION ----
        function animate() {
            requestAnimationFrame(animate);
            const delta = clock.getDelta();

            controls.update();

            // FUSÉE
            if (currentState === "ready") {
                timeSinceLastLaunch += delta;
                if (timeSinceLastLaunch > nextLaunchInterval) {
                    launchRocket();
                    timeSinceLastLaunch = 0;
                    nextLaunchInterval = LAUNCH_INTERVAL_MIN + Math.random() * (LAUNCH_INTERVAL_MAX - LAUNCH_INTERVAL_MIN);
                }
            }

            if (currentState === "rocket" && rocketObj) {
                rocketObj.age += delta;
                rocketObj.y += rocketObj.velocityY * delta + 0.5 * GRAVITY * delta * delta;
                rocketObj.velocityY += GRAVITY * delta;

                rocketObj.mesh.geometry.attributes.position.setXYZ(0, rocketObj.x, rocketObj.y, rocketObj.z);
                rocketObj.mesh.geometry.attributes.position.needsUpdate = true;

                let ti = rocketObj.trailIndex % 60;
                rocketObj.trailPositions[ti * 3 + 0] = rocketObj.x;
                rocketObj.trailPositions[ti * 3 + 1] = rocketObj.y;
                rocketObj.trailPositions[ti * 3 + 2] = rocketObj.z;
                rocketObj.trailIndex++;
                rocketObj.trail.geometry.attributes.position.needsUpdate = true;

                if (rocketObj.age > rocketObj.lifetime || rocketObj.velocityY < 0) {
                    scene.remove(rocketObj.mesh);
                    scene.remove(rocketObj.trail);
                    triggerExplosion(rocketObj.x, rocketObj.y, rocketObj.z, rocketObj.color);
                    rocketObj = null;
                    currentState = "explosion";
                }
            }

            // EXPLOSION
            for (let i = explosionObjs.length - 1; i >= 0; i--) {
                const obj = explosionObjs[i];
                obj.age += delta;
                const attr = obj.geometry.attributes;
                for (let j = 0; j < EXPLOSION_PARTICLES; j++) {
                    let px = attr.position.getX(j);
                    let py = attr.position.getY(j);
                    let pz = attr.position.getZ(j);
                    let vx = attr.velocity.getX(j);
                    let vy = attr.velocity.getY(j);
                    let vz = attr.velocity.getZ(j);

                    px += vx * delta;
                    py += vy * delta + 0.5 * GRAVITY * delta * delta;
                    pz += vz * delta;
                    vy += GRAVITY * delta;

                    attr.position.setXYZ(j, px, py, pz);
                    attr.velocity.setY(j, vy);

                    // Fade out progressif, doux, mais reste lumineux longtemps
                    if (obj.age < obj.lifetime * 0.84) {
                        obj.mesh.material.opacity = 0.97;
                    } else {
                        // Fade out long et doux
                        obj.mesh.material.opacity = Math.max(0.07, 1 - ((obj.age - obj.lifetime * 0.84) / (obj.lifetime * 0.16)));
                    }
                }
                attr.position.needsUpdate = true;

                if (obj.age > obj.lifetime) {
                    scene.remove(obj.mesh);
                    explosionObjs.splice(i, 1);
                    currentState = "ready";
                }
            }

            composer.render();
        }

        init();
    </script>
</body>
</html>
